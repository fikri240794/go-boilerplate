// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: boilerplate.proto

package protobuf_boilerplate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Boilerplate_CreateGuest_FullMethodName     = "/protobuf_boilerplate.Boilerplate/CreateGuest"
	Boilerplate_DeleteGuestByID_FullMethodName = "/protobuf_boilerplate.Boilerplate/DeleteGuestByID"
	Boilerplate_FindAllGuest_FullMethodName    = "/protobuf_boilerplate.Boilerplate/FindAllGuest"
	Boilerplate_FindGuestByID_FullMethodName   = "/protobuf_boilerplate.Boilerplate/FindGuestByID"
	Boilerplate_UpdateGuestByID_FullMethodName = "/protobuf_boilerplate.Boilerplate/UpdateGuestByID"
)

// BoilerplateClient is the client API for Boilerplate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoilerplateClient interface {
	CreateGuest(ctx context.Context, in *CreateGuestRequestVM, opts ...grpc.CallOption) (*GuestResponseVM, error)
	DeleteGuestByID(ctx context.Context, in *DeleteGuestByIDRequestVM, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindAllGuest(ctx context.Context, in *FindAllGuestRequestVM, opts ...grpc.CallOption) (*FindAllGuestResponseVM, error)
	FindGuestByID(ctx context.Context, in *FindGuestByIDRequestVM, opts ...grpc.CallOption) (*GuestResponseVM, error)
	UpdateGuestByID(ctx context.Context, in *UpdateGuestByIDRequestVM, opts ...grpc.CallOption) (*GuestResponseVM, error)
}

type boilerplateClient struct {
	cc grpc.ClientConnInterface
}

func NewBoilerplateClient(cc grpc.ClientConnInterface) BoilerplateClient {
	return &boilerplateClient{cc}
}

func (c *boilerplateClient) CreateGuest(ctx context.Context, in *CreateGuestRequestVM, opts ...grpc.CallOption) (*GuestResponseVM, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuestResponseVM)
	err := c.cc.Invoke(ctx, Boilerplate_CreateGuest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateClient) DeleteGuestByID(ctx context.Context, in *DeleteGuestByIDRequestVM, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Boilerplate_DeleteGuestByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateClient) FindAllGuest(ctx context.Context, in *FindAllGuestRequestVM, opts ...grpc.CallOption) (*FindAllGuestResponseVM, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllGuestResponseVM)
	err := c.cc.Invoke(ctx, Boilerplate_FindAllGuest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateClient) FindGuestByID(ctx context.Context, in *FindGuestByIDRequestVM, opts ...grpc.CallOption) (*GuestResponseVM, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuestResponseVM)
	err := c.cc.Invoke(ctx, Boilerplate_FindGuestByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateClient) UpdateGuestByID(ctx context.Context, in *UpdateGuestByIDRequestVM, opts ...grpc.CallOption) (*GuestResponseVM, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuestResponseVM)
	err := c.cc.Invoke(ctx, Boilerplate_UpdateGuestByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoilerplateServer is the server API for Boilerplate service.
// All implementations must embed UnimplementedBoilerplateServer
// for forward compatibility.
type BoilerplateServer interface {
	CreateGuest(context.Context, *CreateGuestRequestVM) (*GuestResponseVM, error)
	DeleteGuestByID(context.Context, *DeleteGuestByIDRequestVM) (*emptypb.Empty, error)
	FindAllGuest(context.Context, *FindAllGuestRequestVM) (*FindAllGuestResponseVM, error)
	FindGuestByID(context.Context, *FindGuestByIDRequestVM) (*GuestResponseVM, error)
	UpdateGuestByID(context.Context, *UpdateGuestByIDRequestVM) (*GuestResponseVM, error)
	mustEmbedUnimplementedBoilerplateServer()
}

// UnimplementedBoilerplateServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBoilerplateServer struct{}

func (UnimplementedBoilerplateServer) CreateGuest(context.Context, *CreateGuestRequestVM) (*GuestResponseVM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuest not implemented")
}
func (UnimplementedBoilerplateServer) DeleteGuestByID(context.Context, *DeleteGuestByIDRequestVM) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGuestByID not implemented")
}
func (UnimplementedBoilerplateServer) FindAllGuest(context.Context, *FindAllGuestRequestVM) (*FindAllGuestResponseVM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllGuest not implemented")
}
func (UnimplementedBoilerplateServer) FindGuestByID(context.Context, *FindGuestByIDRequestVM) (*GuestResponseVM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGuestByID not implemented")
}
func (UnimplementedBoilerplateServer) UpdateGuestByID(context.Context, *UpdateGuestByIDRequestVM) (*GuestResponseVM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuestByID not implemented")
}
func (UnimplementedBoilerplateServer) mustEmbedUnimplementedBoilerplateServer() {}
func (UnimplementedBoilerplateServer) testEmbeddedByValue()                     {}

// UnsafeBoilerplateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoilerplateServer will
// result in compilation errors.
type UnsafeBoilerplateServer interface {
	mustEmbedUnimplementedBoilerplateServer()
}

func RegisterBoilerplateServer(s grpc.ServiceRegistrar, srv BoilerplateServer) {
	// If the following call pancis, it indicates UnimplementedBoilerplateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Boilerplate_ServiceDesc, srv)
}

func _Boilerplate_CreateGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuestRequestVM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServer).CreateGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boilerplate_CreateGuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServer).CreateGuest(ctx, req.(*CreateGuestRequestVM))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boilerplate_DeleteGuestByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGuestByIDRequestVM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServer).DeleteGuestByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boilerplate_DeleteGuestByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServer).DeleteGuestByID(ctx, req.(*DeleteGuestByIDRequestVM))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boilerplate_FindAllGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllGuestRequestVM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServer).FindAllGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boilerplate_FindAllGuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServer).FindAllGuest(ctx, req.(*FindAllGuestRequestVM))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boilerplate_FindGuestByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindGuestByIDRequestVM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServer).FindGuestByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boilerplate_FindGuestByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServer).FindGuestByID(ctx, req.(*FindGuestByIDRequestVM))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boilerplate_UpdateGuestByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGuestByIDRequestVM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServer).UpdateGuestByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Boilerplate_UpdateGuestByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServer).UpdateGuestByID(ctx, req.(*UpdateGuestByIDRequestVM))
	}
	return interceptor(ctx, in, info, handler)
}

// Boilerplate_ServiceDesc is the grpc.ServiceDesc for Boilerplate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Boilerplate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf_boilerplate.Boilerplate",
	HandlerType: (*BoilerplateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGuest",
			Handler:    _Boilerplate_CreateGuest_Handler,
		},
		{
			MethodName: "DeleteGuestByID",
			Handler:    _Boilerplate_DeleteGuestByID_Handler,
		},
		{
			MethodName: "FindAllGuest",
			Handler:    _Boilerplate_FindAllGuest_Handler,
		},
		{
			MethodName: "FindGuestByID",
			Handler:    _Boilerplate_FindGuestByID_Handler,
		},
		{
			MethodName: "UpdateGuestByID",
			Handler:    _Boilerplate_UpdateGuestByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "boilerplate.proto",
}
